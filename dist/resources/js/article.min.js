let fontFamily = "CONTENT",
    unifontLoaded = !1,
    showingSideBar = true;

function handleGPGData() {
    function e() {
        let e = Math.random().toString(36).substr(2, 9);
        return "encrypted-element-" + e
    }
    let t = document.querySelectorAll("pre.gpg"),
        l = {};
    if (0 !== t.length) {
        for (let n of t) {
            let r = e();
            n.setAttribute("id", r), l[r] = n.innerText, n.innerHTML = "<code>Loading GPG Library...</code>"
        } ! function e(t, l, n) {
            let r = document.createElement("script");
            r.src = t, r.onload = function () {
                l()
            }, r.onerror = function () {
                n()
            }, document.head.appendChild(r)
        }("/resources/js/openpgp.min.js", () => {
            for (let e of t) {
                e.innerHTML = "";
                let n = document.createElement("div"),
                    r = document.createElement("span");
                r.textContent = "Input password to decrypt:";
                let o = document.createElement("input");
                o.type = "password";
                let a = document.createElement("button");
                a.textContent = "OK", a.onclick = async t => {
                    if (t.preventDefault(), 0 == o.value.length) {
                        alert("No password provided!");
                        return
                    } {
                        let n = await openpgp.readMessage({
                            armoredMessage: l[e.getAttribute("id")]
                        });
                        try {
                            let {
                                data: r,
                                signatures: a
                            } = await openpgp.decrypt({
                                message: n,
                                passwords: [o.value || ""],
                                format: "utf8"
                            }), s = document.createElement("div");
                            s.textContent = r, e.replaceWith(s)
                        } catch (i) {
                            alert("密码错误..."), console.error(i)
                        }
                    }
                }, n.appendChild(r), n.appendChild(document.createElement("br")), n.appendChild(o), n.appendChild(a), e.appendChild(n)
            }
        }, () => {
            for (let e of t) e.innerHTML = "<div><code>Failed to load GPG Library</code><div>"
        })
    }
}

function removeAllStylesheets() {
    document.querySelectorAll('link[rel="stylesheet"]').forEach(e => {
        e.remove()
    }), document.querySelectorAll("style").forEach(e => {
        e.remove()
    })
}

function loadNewStylesheet(e) {
    let t = document.createElement("link");
    t.rel = "stylesheet", t.href = e, document.head.appendChild(t)
}

document.addEventListener("DOMContentLoaded", () => {
    new Viewer(document.querySelector("main")), document.getElementById("backtotop").onclick = e => {
        window.scrollTo({
            top: 0
        })
    };

    const btnToggleSideBar = document.getElementById("togglesidebar"),
        btnSwitchFont = document.getElementById("switchfont"),
        btnReadingMode = document.getElementById("readingmode");

    btnToggleSideBar.onclick = e => {
        const container = document.getElementsByTagName("nav")[0];
        if (showingSideBar) {
            container.querySelectorAll("ul").forEach(i => i.style.display = 'none');
            container.querySelectorAll("strong").forEach(i => i.style.display = 'none');
            btnSwitchFont.style.display = 'none', btnReadingMode.style.display = 'none';
            btnToggleSideBar.innerHTML = '<b>目录</b>';
        } else {
            container.querySelectorAll("ul").forEach(i => i.style.display = 'unset');
            container.querySelectorAll("strong").forEach(i => i.style.display = 'unset');
            btnSwitchFont.style.display = 'block', btnReadingMode.style.display = 'block';
            btnToggleSideBar.innerHTML = '<b>隐藏</b>';
        }
        showingSideBar = !showingSideBar;
    }

    btnSwitchFont.onclick = () => {
        if (!unifontLoaded) {
            unifontLoaded = !0;
            let e = `
                @font-face { font-family: 'UNI';
                    src: url('/resources/fonts/unifont-15.0.06.woff2'); }
            `,
                t = document.createElement("style");
            t.innerHTML = e, document.head.appendChild(t)
        }
        let l = Array.from(document.styleSheets).find(e => null === e.href);
        l.addRule(":root", `--font-family-prose: ${"CONTENT" === fontFamily ? "UNI" : "CONTENT"}`);
        l.addRule(":root", `--font-family-heading: ${"CONTENT" === fontFamily ? "UNI" : "CONTENT"}`);
        fontFamily = "CONTENT" === fontFamily ? "UNI" : "CONTENT"
    };
    btnReadingMode.onclick = () => {
        removeAllStylesheets(), loadNewStylesheet("/resources/css/article/simple.css");
        document.getElementById("TOC").insertAdjacentHTML("beforebegin", '<button id="goBack">返回普通模式</button>'), document.getElementById("goBack").onclick = e => {
            e.preventDefault(), removeAllStylesheets(), loadNewStylesheet("/resources/css/article/theme.css"), loadNewStylesheet("/resources/css/article/code.css"), loadNewStylesheet("/resources/css/article/prebuilt-fonts.css"), document.getElementById("goBack").remove()
        }
    };
    let e = document.querySelectorAll('.task-list > li > input[type="checkbox"]');
    Array.from(e).forEach(e => {
        let t = e.checked;
        e.disabled = !1, e.addEventListener("click", e => {
            e.target.checked = t
        })
    });
    let t = window.innerHeight,
        l = document.documentElement.scrollHeight,
        n = document.querySelector("#content_progress");
    n.max = l - t, n.value = window.scrollY, document.addEventListener("scroll", function () {
        n.max = document.documentElement.scrollHeight - window.innerHeight, n.value = window.scrollY
    }), "&nbsp;" == document.querySelector(".subtitle").innerHTML && (document.querySelector(".subtitle").innerHTML = document.querySelector(".date > time:nth-child(1)").innerHTML.substr(5)), handleGPGData()
}, !1);